{"ast":null,"code":"import * as exampledata from '../data/sample-creature-data.json';\nimport { Creature } from './../models/Creature';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CreatureServiceService {\n  constructor(http) {\n    this.http = http;\n    this.host = \"http://localhost:5000\";\n    this.creatures = exampledata;\n    this.createCreatures();\n  }\n  createCreatures() {\n    exampledata.forEach(data => {\n      const creature = new Creature(data.id, data.name, data.description, data.hp, data.atk, data.def, data.unique);\n      this.creatures.push(creature);\n    });\n  }\n  getCreatures(callback) {\n    this.http.get(this.host + \"/creatures\").subscribe(creatures => {\n      callback(creatures);\n    });\n  }\n  getCreature(id) {\n    const creature = this.creatures.find(a => a.Id === id);\n    if (creature) {\n      return new Creature(creature.Id, creature.Name, creature.Description, creature.hp, creature.Atk, creature.Def, creature.Unique);\n    }\n    return undefined;\n  }\n  createCreature(creature, callback) {\n    this.creatures.push(creature);\n    this.http.post(this.host + \"/creatures\", creature).subscribe(data => {\n      callback();\n    });\n  }\n  updateCreature(creature, callback) {\n    this.http.put(this.host + \"/creatures\", creature).subscribe(data => {\n      callback();\n    });\n  }\n  deleteCreature(id, callback) {\n    this.http.delete(this.host + \"/creatures/\" + id).subscribe(data => {\n      callback();\n    });\n  }\n}\nCreatureServiceService.ɵfac = function CreatureServiceService_Factory(t) {\n  return new (t || CreatureServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nCreatureServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CreatureServiceService,\n  factory: CreatureServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,WAAW,MAAM,mCAAmC;AAChE,SAASC,QAAQ,QAAQ,sBAAsB;;;AAM/C,OAAM,MAAOC,sBAAsB;EAIjCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFjB,SAAI,GAAG,uBAAuB;IACnC,cAAS,GAAeJ,WAAW;IAEpC,IAAI,CAACK,eAAe,EAAE;EACvB;EAEQA,eAAe;IACrBL,WAAW,CAACM,OAAO,CAAEC,IAAS,IAAI;MACjC,MAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAACM,IAAI,CAACE,EAAE,EAAEF,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACI,WAAW,EAAEJ,IAAI,CAACK,EAAE,EAAEL,IAAI,CAACM,GAAG,EAAEN,IAAI,CAACO,GAAG,EAAEP,IAAI,CAACQ,MAAM,CAAC;MAC7G,IAAI,CAACC,SAAS,CAACC,IAAI,CAACT,QAAQ,CAAC;IAC9B,CAAC,CAAC;EACH;EACOU,YAAY,CAACC,QAAyC;IAC5D,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAa,IAAI,CAACC,IAAI,GAAG,YAAY,CAAC,CACnDC,SAAS,CAAEN,SAAoB,IAAI;MAClCG,QAAQ,CAACH,SAAS,CAAC;IACpB,CAAC,CAAC;EACH;EACOO,WAAW,CAACd,EAAU;IAC5B,MAAMD,QAAQ,GAAG,IAAI,CAACQ,SAAS,CAACQ,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKjB,EAAE,CAAC;IAExD,IAAID,QAAQ,EAAE;MACb,OAAO,IAAIP,QAAQ,CAACO,QAAQ,CAACkB,EAAE,EAAElB,QAAQ,CAACmB,IAAI,EAAEnB,QAAQ,CAACoB,WAAW,EAAEpB,QAAQ,CAACI,EAAE,EAAEJ,QAAQ,CAACqB,GAAG,EAAErB,QAAQ,CAACsB,GAAG,EAAEtB,QAAQ,CAACuB,MAAM,CAAC;;IAGhI,OAAOC,SAAS;EACjB;EACOC,cAAc,CAACzB,QAAkB,EAAEW,QAAoB;IAC7D,IAAI,CAACH,SAAS,CAACC,IAAI,CAACT,QAAQ,CAAC;IAC7B,IAAI,CAACJ,IAAI,CAAC8B,IAAI,CAAW,IAAI,CAACb,IAAI,GAAG,YAAY,EAAEb,QAAQ,CAAC,CAC3Dc,SAAS,CAAEf,IAAI,IAAI;MACnBY,QAAQ,EAAE;IACX,CAAC,CAAC;EACH;EACOgB,cAAc,CAAC3B,QAAkB,EAAEW,QAAoB;IAC7D,IAAI,CAACf,IAAI,CAACgC,GAAG,CAAW,IAAI,CAACf,IAAI,GAAG,YAAY,EAAEb,QAAQ,CAAC,CAC1Dc,SAAS,CAAEf,IAAI,IAAI;MACnBY,QAAQ,EAAE;IACX,CAAC,CAAC;EACH;EACOkB,cAAc,CAAC5B,EAAU,EAAEU,QAAoB;IACrD,IAAI,CAACf,IAAI,CAACkC,MAAM,CAAW,IAAI,CAACjB,IAAI,GAAG,aAAa,GAAGZ,EAAE,CAAC,CACzDa,SAAS,CAAEf,IAAI,IAAI;MACnBY,QAAQ,EAAE;IACX,CAAC,CAAC;EACH;;AA/CUjB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAqC,SAAtBrC,sBAAsB;EAAAsC,YAFrB;AAAM","names":["exampledata","Creature","CreatureServiceService","constructor","http","createCreatures","forEach","data","creature","id","name","description","hp","atk","def","unique","creatures","push","getCreatures","callback","get","host","subscribe","getCreature","find","a","Id","Name","Description","Atk","Def","Unique","undefined","createCreature","post","updateCreature","put","deleteCreature","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Christa\\Documents\\GCU\\CST-391\\workspace\\BiblicalBestiaryMilestone4\\src\\app\\service\\creature-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as exampledata from '../data/sample-creature-data.json';\nimport { Creature } from './../models/Creature';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CreatureServiceService {\n\n\tprivate host = \"http://localhost:5000\";\n  \t\tcreatures: Creature[] = exampledata;\n\t\tconstructor(private http: HttpClient) {\n\t\t\tthis.createCreatures();\n\t\t}\n\n\t\tprivate createCreatures(): void {\n\t\t\t\texampledata.forEach((data: any) => {\n\t\t\t\t\tconst creature = new Creature(data.id, data.name, data.description, data.hp, data.atk, data.def, data.unique);\n\t\t\t\t\tthis.creatures.push(creature);\n\t\t\t\t});\n\t\t\t}\n\t\t\tpublic getCreatures(callback: (creatures: Creature[]) => void): void {\n\t\t\t\tthis.http.get<Creature[]>(this.host + \"/creatures\").\n\t\t\t\tsubscribe((creatures:Creature[]) => {\n\t\t\t\t\tcallback(creatures)\n\t\t\t\t});\n\t\t\t}\n\t\t\tpublic getCreature(id: number): Creature | undefined {\n\t\t\t\tconst creature = this.creatures.find((a) => a.Id === id);\n\t\t\n\t\t\t\tif (creature) {\n\t\t\t\t\treturn new Creature(creature.Id, creature.Name, creature.Description, creature.hp, creature.Atk, creature.Def, creature.Unique);\n\t\t\t\t}\n\t\t\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tpublic createCreature(creature: Creature, callback: () => void): void {\n\t\t\t\tthis.creatures.push(creature);\n\t\t\t\tthis.http.post<Creature>(this.host + \"/creatures\", creature)\n\t\t\t\t.subscribe((data) => {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t}\n\t\t\tpublic updateCreature(creature: Creature, callback: () => void): void {\n\t\t\t\tthis.http.put<Creature>(this.host + \"/creatures\", creature)\n\t\t\t\t.subscribe((data) => {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t}\n\t\t\tpublic deleteCreature(id: number, callback: () => void): void {\n\t\t\t\tthis.http.delete<Creature>(this.host + \"/creatures/\" + id)\n\t\t\t\t.subscribe((data) => {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}