{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    this.artists = [];\n    this.albums = [];\n    this.createArtists();\n    this.createAlbums();\n  }\n  createArtists() {\n    this.artists.push(new Artist(0, 'The Beatles'));\n  }\n  createAlbums() {\n    exampledata.forEach(data => {\n      if (data.artist === 'The Beatles') {\n        const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n        this.albums.push(album);\n      }\n    });\n  }\n  getArtists(callback) {\n    this.http.get(this.host + \"/artists\").subscribe(artists => {\n      callback(artists);\n    });\n  }\n  getAlbums(callback) {\n    this.http.get(this.host + \"/albums\").subscribe(albums => {\n      callback(albums);\n    });\n  }\n  getAlbum(artist, id) {\n    const album = this.albums.find(a => a.Artist === artist && a.Id === id);\n    if (album) {\n      const tracks = album.Tracks.map(track => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n    }\n    return undefined;\n  }\n  getAlbumsOfArtist(artistName, callback) {\n    let request = this.host + `/albums/${artistName}`;\n    console.log('request', request);\n    this.http.get(request).subscribe(albums => {\n      console.log('have albums', albums);\n      callback(albums);\n    });\n    return this.albums;\n  }\n  createAlbum(album, callback) {\n    this.albums.push(album);\n    this.http.post(this.host + \"/albums\", album).subscribe(data => {\n      callback();\n    });\n  }\n  updateAlbum(album, callback) {\n    this.http.put(this.host + \"/albums\", album).subscribe(data => {\n      callback();\n    });\n  }\n  deleteAlbum(id, callback) {\n    this.http.delete(this.host + \"/albums/\" + id).subscribe(data => {\n      callback();\n    });\n  }\n}\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["exampledata","Album","Artist","Track","MusicServiceService","constructor","createArtists","createAlbums","artists","push","forEach","data","artist","tracks","map","trackData","id","number","title","lyrics","video","album","description","year","image","albums","getArtists","callback","http","get","host","subscribe","getAlbums","getAlbum","find","a","Id","Tracks","track","Number","Title","Lyrics","Video","Description","Year","Image","undefined","getAlbumsOfArtist","artistName","request","console","log","createAlbum","post","updateAlbum","put","deleteAlbum","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Christa\\Documents\\GCU\\CST-391\\workspace\\activity4\\src\\app\\service\\music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport exampledata from '../../data/sample-music-data.json';\n\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n\tprivate readonly artists: Artist[] = [];\n\tprivate readonly albums: Album[] = [];\n\n\tconstructor() {\n\t\tthis.createArtists();\n\t\tthis.createAlbums();\n\t}\n\n\tprivate createArtists(): void {\n\t\tthis.artists.push(new Artist(0, 'The Beatles'));\n\t}\n\n\tprivate createAlbums(): void {\n\t\texampledata.forEach((data: any) => {\n\t\t\tif (data.artist === 'The Beatles') {\n\t\t\t\tconst tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n\t\t\t\tconst album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n\t\t\t\tthis.albums.push(album);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getArtists(callback: (artists: Artist[]) => void): void {\n\t\tthis.http.get<Artist[]>(this.host + \"/artists\").\n\t\tsubscribe((artists:Artist[]) => {\n\t\t\tcallback(artists)\n\t\t});\n\t}\n\n\tpublic getAlbums(callback: (albums: Album[]) => void): void {\n\t\tthis.http.get<Album[]>(this.host + \"/albums\").\n\t\tsubscribe((albums:Album[]) => {\n\t\t\tcallback(albums)\n\t\t});\n\t}\n\n\tpublic getAlbum(artist: string, id: number): Album | undefined {\n\t\tconst album = this.albums.find((a) => a.Artist === artist && a.Id === id);\n\n\t\tif (album) {\n\t\t\tconst tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n\t\t\treturn new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\t\n\tpublic getAlbumsOfArtist(artistName: String, callback: (albums: Album[]) => void): Album[] {\n\t\tlet request = this.host + `/albums/${artistName}`;\n\t\tconsole.log('request', request);\n\t\tthis.http.get<Album[]>(request).\n\t\tsubscribe((albums: Album[]) => {\n\t\t\tconsole.log('have albums', albums);\n\t\t\tcallback(albums);\n\t\t});\n\t\treturn this.albums;\n\t}\n\n\tpublic createAlbum(album: Album, callback: () => void): void {\n\t\tthis.albums.push(album);\n\t\tthis.http.post<Album>(this.host + \"/albums\", album)\n\t\t.subscribe((data) => {\n\t\t\tcallback();\n\t\t});\n\t}\n\n\tpublic updateAlbum(album: Album, callback: () => void): void {\n\t\tthis.http.put<Album>(this.host + \"/albums\", album)\n\t\t.subscribe((data) => {\n\t\t\tcallback();\n\t\t});\n\t}\n\n\tpublic deleteAlbum(id: number, callback: () => void): void {\n\t\tthis.http.delete<Album>(this.host + \"/albums/\" + id)\n\t\t.subscribe((data) => {\n\t\t\tcallback();\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}